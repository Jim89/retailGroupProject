source('~/.active-rstudio-document', echo=TRUE)
summary(data)
mean(salary)
mean(data = data, salary)
mean(data$salary)
mean(data$ceoten)
ls()
desc
data$ceoten[data$ceoten == 0]
?max
max(data = data, na.rm = TRUE)
max(data, na.rm=TRUE)
max(data$ceoten, na.rm=TRUE)
View(data)
mean(data$ceoten)
data$ceoten[data$ceoten >= mean(data$ceoten)]
data$ceoten$salary[data$ceoten$salary]
data$ceoten
data$ceoten,salary
data$salary
?mydf
??mydf
aboveAverage <- data$ceoten[data$ceoten >= 7.95]
aboveAverage <- data$ceoten[data$ceoten >= mean(data$ceoten)]
belowAverage <- data$ceoten[data$ceoten < mean(data$ceoten)]
mean(aboveAverage$salary)
aboveAverage <-data$(ceoten,salary)[data$ceoten >= mean(data$ceoten)]
aboveAverage <- data$ceoten[data$ceoten >= mean(data$ceoten)] & data$salary
aboveAveraga <- subset(data, ceoten >= mean(data$ceoten) & salary)
View(aboveAveraga)
View(aboveAveraga)
View(aboveAveraga)
aboveAverage <- subset(data, ceoten >= mean(data$ceoten))
View(aboveAverage)
View(aboveAverage)
?rm
rm(aboveAveraga)
rm(belowAverage)
rm(aboveAverage)
aboveAverageT <- subset(data, ceoten >= mean(data$ceoten))
belowAverageT <- subset(data, ceoten < mean(data$ceoten))
?plot
?plot
plot(data$ceoten, data$salary)
desc
?lm
lm(log(salary)~ceoten, data = data)
lm(log(salary)~ceoten, data = data, model = TRUE)
fittedModel = lm(log(salary)~ceoten, data = data)
summary(fittedModel)
summary(lm(log(salary)~ceoten, data = data))
getwd()
load("C:/Users/Julian/Desktop/Statistics & Econometrics/ProblemSet1/bwght.RData")
load("C:/Users/Julian/Desktop/Statistics & Econometrics/ProblemSet1/bwght.RData")
summary(lm(bwght~cigs, data = data))
desc
View(data)
plot(data$bwght, data$cigs)
plot(data$cigs, data$bwght)
desc
load("C:/Users/Julian/Desktop/Statistics & Econometrics/ProblemSet1/ceosal2.RData")
desc
View(data)
View(data)
maxTenure <- data[ceoten == 37]
maxTenure <- data$ceoten[data$ceoten == 37]
View(data)
ggplot2(data, x = ceoten, y= salary)
library(ggplot2)
install.packages("ggplot2")
ggplot2(data, x = ceoten, y = salary)
library(ggplot2)
ggplot2(data, x= ceoten, y=salary)
ggplot2(data, aes(x=ceoten, y=salary))
ggplot2(data, aes(x=ceoten, y=salary)) + geom_point()
ggplot(data, aes(x=ceoten, y=salary)) + geom_point()
?plot
plot(ceoten, salary)
plot(ceoten, salary, data)
plot(data$ceoten, data$salary)
?qplot
qplot(x = ceoten, y = salary, data)
qplot(x = data$ceoten, y = data$salary)
View(data)
desc
summary(lm(lsalary~ceoten, data= data))
load("C:/Users/Julian/Desktop/Statistics & Econometrics/ProblemSet1/bwght.RData")
View(data)
load("C:/Users/Julian/Downloads/gpa1.RData")
*t.test
?t.test
t.test(data$colGPA, mu=3)
t.test(data$colGPA, alternative = "two sided", mu=3)
t.test(data$colGPA, alternative = c("two sided"), mu = 3)
t.test(data$colGPA, alternative = c("two sided", "less", "greater"))
t.test(data$colGPA, y = NULL, alternative = "two.sided", mu = 3)
View(desc)
t.test(data$colGPA, y = data$male, alternative = "two.sided", var.equal = FALSE)
mean(data$colGPA)
t.test(data$colGPA, y = NULL, alternative = "greater", mu = 3)
desc
?variance
?standard deviation
??variance
t.test(data$colGPA, y = NULL, alternative = "greater", mu = 3.0)
t.test(data$colGPA, y = NULL, alternative = "greater", mu = 3)
t.test(data$colGPA[data$male == 1], data$colGPA[data$male == 0], alternative = "two.sided", var.equal = TRUE)
t.test(data$colGPA[data$male == 1], data$colGPA[data$male == 0], alternative = "two.sided", var.equal = FALSE)
summary(lm(log(wage)~educ+exper+tenure,data=data))
load("C:/Users/Julian/Desktop/Statistics & Econometrics/ProblemSet1/ceosal2.RData")
avesalary = mean(data$salary)
avesalary
avesalary <- mean(data$salary)
avesalary
avetenure <- mean(data$ceoten)
avetenure
which(data$ceoten ==0)
which(data$salary > 7000)
which(data$salary > 400)
View(data)
which(data$salary > 1000)
length(which(data$salary > 1000))
View(data)
max(data$salary)
min(data$salary)
library(lubridate)
install.packages("lubridate")
library(lubridate)
faithful
demo(graphics)
summary(lm(log(psoda)~prpblck+log(income)+prppov, data = data))
load("C:/Users/Julian/Desktop/Statistics & Econometrics/ProblemSet2/discrim.RData")
summary(lm(log(psoda)~prpblck+log(income)+prppov, data = data))
load("C:/Users/Julian/Desktop/Statistics & Econometrics/ProblemSet2/discrim.RData")
View(data)
the coefficient increase in size slightly
incomeVsPrppov <- subset(data, data$income&data$prppov)
View(incomeVsPrppov)
incomeVsPrppov <- subset(data, data$income)
incomeVsPrppov <- subset(data, select = c(data$income, data$prppov))
incomeVsPrppov <- subset(data, select = c("data$income", "data$prppov"))
incomeVsPrppov <- subset(data, select = c("income", "prppov"))
View(incomeVsPrppov)
cor(incomeVsPrppov, use = "pairwise.complete.obs", method = "pearson")
cor(incomeVsPrppov, use = "complete.obs", method = "pearson")
cor(incomeVsPrppov, use = "all.obs", method = "pearson")
load("C:/Users/Julian/Desktop/Statistics & Econometrics/ProblemSet2/ceosal1.RData")
load("C:/Users/Julian/Desktop/Statistics & Econometrics/ProblemSet2/ceosal1.RData")
summary(lm(log(salary~log(sales)+roe+ros, data = data))
summary(lm(log(salary~log(sales)+roe+ros, data = data))
summary(lm(log(salary)~log(sales)+roe+ros, data = data))
desc
max(ros)
max(data$ros)
min(data$ros)
View(data)
View(data)
mean(data$ros)
summary(lm(log(salary)~log(sales)+roe+ros, data = data))
summary(lm(log(salary)~ros, data = data))
View(data)
load("C:/Users/Julian/Desktop/Statistics & Econometrics/ProblemSet2/discrim.RData")
View(data)
desc
summary(lm(log(psoda)~prpblck+log(income), data = data))
summary(lm(lpsoda~prpblck+lincome, data = data))
mean(data$prpblck)
max(data$prpblck)
View(data)
summary(lm(log(psoda)~prpblck, data = data))
blackAndIncome <- subset(data, select = c("lincome", "prpblck"))
cor(blackAndIncome, use = "pairwise.complete.obs", method = "pearson")
summary(lm(log(psoda)~prpblck+log(income)+prppov, data = data))
summary(lm(log(psoda)~prpblck, data = data))
?lm
load("C:/Users/Julian/Desktop/Statistics & Econometrics/ProblemSet2/ceosal1.RData")
load("C:/Users/Julian/Desktop/Statistics & Econometrics/Session_6/hprice1.RData")
desc
lm(price~lotsize+bdrms, data = data)
summary(lm(price~lotsize+bdrms, data = data))
summray(data)
summary(data)
?ggplot
?qplot
library(ggplot2)
?ggplot
ggplot()
?ggplot
ggplot(data, aes(x = lotsize, y = price)) + geom_point()
ggplot(data, aes(x = assess, y = price)) + geom_point()
ggplot(data, aes(x = bdrms, y = price)) + geom_point()
ggplot(data, aes(x = sqrft, y = price)) + geom_point()
load("C:/Users/Julian/Desktop/Statistics & Econometrics/Session_5/beauty.RData")
data$male$looks.factor <- factor(data.male$looks)
data.male$looks.factor <- factor(data.male$looks)
?lm
View(data)
load("C:/Users/Julian/Downloads/discrim.RData")
desc
fitted1a <- lm(log(psoda)~prpblck + log(income) + prppov, data)
summary(fitted1a)
View(data)
fitted1b <- lm(log(psoda)~prpblck + log(income) + prppov + hseval, data)
summary(fitted1b)
fitted1b <- lm(log(psoda)~prpblck + log(income) + prppov + log(hseval), data)
summary(fitted1b)
load("C:/Users/Julian/Desktop/Statistics & Econometrics/wage1.RData")
desc()
desc(data)
data
desc
lm(log(wage)~female, data)
model1 <- lm(log(wage)~female, data)
model1$residuals
data$residuals <- model1$residuals
desc
View(data)
model2 <- lm(log(wage)~educ)
model2 <- lm(log(wage)~educ, data)
model3 <- lm(residuals~educ, data)
summary(model2)
summary(model3)
model4 <- lm(log(wage)~female + educ, data)
summary(model4)
model2 <- lm(log(wage)~female + exper, data)
model3 <- lm(residuals~exper, data)
model2
model3
train <- read.csv("C:/Users/Julian/Desktop/Kaggle/Winton_Stock_Market_Challenge/train.csv")
features <- subset(train, select = c(Feature_1:Feature_25))
par(mfcol = c(5,5))
for (i in 7)
{
name = paste("Feature", i)
hist(features[[i]], main = name, xlab = name, ylab = "Count",col="blue")
}
FeaturesR <- read.csv("C:/Users/Julian/Desktop/Kaggle/Winton_Stock_Market_Challenge/FeaturesR.csv")
View(FeaturesR)
cov(FeaturesR)
eigen(cov(FeaturesR))
library(matrixcalc)
install.packages("matrixcalc")
library(matrixcalc)
eigenFeatures <- eigen(cov(FeaturesR))
eigenFeatures$values
matrix.trace(cov(FeaturesR))
eigenFeatures$values
eigenFeatures
install.packages("Metrics")
help(Metrics)
??Metrics
?Metrics
# Step 0 - load packages--------------------------------------------------------------------------------
library(dplyr)
library(funModeling)
# Step 1 - load and filter data-------------------------------------------------------------------------
setwd("C:/Users/Julian/Desktop/MScBA/Retail&Marketing/Group_Assignment")
coffee <- read.csv("InstantCoffee.csv",
encoding = "latin1",
stringsAsFactors = FALSE)
# Filter retailers
coffee <- filter(coffee, shop_desc %in% c("1TESCO",
"2ASDA",
"3SAINSBURYS",
"4MORRISONS",
"7DICSOUNTERS Aldi",
"7DISCOUNTERS Lidl"))
# Filter categories
coffee <- filter(coffee, sub_cat_name %in% c("Freeze Dried",
"Granules",
"Micro Ground",
"Decaf Freeze Dried"))
# Merge Aldi and Lidl
for (i in 1:nrow(coffee))
{
if (coffee$shop_desc[i] == "7DISCOUNTERS Aldi" | coffee$shop_desc[i] == "7DISCOUNTERS Lidl"){
coffee$shop_desc[i] <- "Aldi/Lidl"
} else {
next
}
}
# Step 2 - Sanity check--------------------------------------------------------------------------------
# Check for 0's and NA's
status <- df_status(coffee) # No NA's, 619 0's for NETSPEND, 3F2 -> 3rd pack recorded with NETSPEND == 0
status
ordered_coffee <- coffee[order(coffee$HOUSE, coffee$NETSPEND, coffee$DAY, coffee$Volume), ]
repeated_rows <- count_repeat(ordered_coffee)
count_repeat <- function(data)
{
repeated <- data[duplicated(data) | duplicated(data, fromLast=TRUE), ]
unique_repeated <- unique(repeated)
l <- duplicated(repeated)
count <- c()
n <- 1
error <- 0
for (i in 1:(length(l))){
if(i < length(l)){
if (l[i] == l[i + 1] & l[i] == TRUE) {n <- n+1}
else if (l[i] != l[i + 1] & l[i] == TRUE){
n <- n + 1
count <- c(count, n)
}
else {n <- 1}
}
else {
count <- c(count, n + 1)
}
}
result <- cbind(unique_repeated, count)
return (result)
}
ordered_coffee <- coffee[order(coffee$HOUSE, coffee$NETSPEND, coffee$DAY, coffee$Volume), ]
repeated_rows <- count_repeat(ordered_coffee)
repeated_rows
nrows(repeated_rows)
nrow(repeated_rows)
nrow(unique(repeated_rows))
View(repeated_rows)
?duplicated
typeof(coffee[1,])
coffee[1,]
x = coffee[1,]
y = coffee[2,]
duplicates(x,y)
duplicated(x,y)
duplicated(x,y, fromLast = TRUE)
repeated <- coffee[duplicated(coffee) | duplicated(coffee, fromLast=TRUE), ]
repeated
View(repeated)
View(repeated)
exclude1st <- duplicated(repeated)
exclude1st
View(repeated)
repeated <- coffee[duplicated(coffee) | duplicated(coffee, fromLast=TRUE), ]
nrow(repeated)
setwd("C:/Users/Julian/Documents/retailGroupProject/data/results")
setwd("C:/Users/Julian/Documents/retailGroupProject/data/results")
coffee <- read.csv("buying_behavior.csv")
setwd("C:/Users/Julian/Documents/retailGroupProject/data/results")
setwd("C:\Users/Julian/Documents/retailGroupProject/data/results")
coffee <- read.csv("buying_behavior.csv")
setwd("C:/Users/Julian/Documents/retailGroupProject/data/results")
coffee <- read.csv("buying_behaviour.csv")
View(coffee)
nrow(coffee)
unique(coffee)
nrow(unique(coffee))
var(coffee$avg_weekly_spend)
mean(coffee$avg_weekly_spend)
View(coffee)
cust_grouped <- group_by(coffee, cust_type)
View(cust_grouped)
var.test(cust_grouped$avg_weekly_spend)
coffee[cust_type=="heavy"]
coffee[coffee[cust_type=="heavy"]]
View(coffee)
coffee[coffee(cust_type=="heavy")]
coffee[cust_type=="heavy",]
coffee[coffee$cust_type=="heavy",]
coffee[coffee$cust_type=="heavy"]
coffee[coffee$cust_type=="heavy",:]
coffee[coffee$cust_type=="heavy",]
coffee[,coffee$cust_type=="heavy"]
coffee[:,coffee$cust_type=="heavy"]
coffee[coffee$cust_type=="heavy"]
print (coffee[coffee$cust_type=="heavy"])
print (coffee[coffee$cust_type=="light"])
View(coffee)
coffee[coffee$cust_type == "Heavy"]
coffee[coffee$cust_type == "Heavy",]
?var.test
View(coffee)
var.test(coffee[coffee$cust_type == "Heavy", ], coffee[coffee$cust_type == "Light", ], alternative = "two.sided")
var.test(coffee[coffee$cust_type == "Heavy", ]$avg_weekly_spend, coffee[coffee$cust_type == "Light", ]$avg_weekly_spend, alternative = "two.sided")
var(coffee[coffee$cust_type == "Heavy", ]$avg_weekly_spend)
var(coffee[coffee$cust_type == "Heavy", ]$avg_weekly_spend)
var(coffee[coffee$cust_type == "Light", ]$avg_weekly_spend)
var.test(coffee[coffee$cust_type == "Heavy", ]$avg_weekly_spend, coffee[coffee$cust_type == "Light", ]$avg_weekly_spend, alternative = "two.sided")
var(coffee[coffee$cust_type == "Heavy", ]$avg_weekly_visits)
var(coffee[coffee$cust_type == "Light", ]$avg_weekly_visits)
var.test(coffee[coffee$cust_type == "Heavy", ]$avg_weekly_visits, coffee[coffee$cust_type == "Light", ]$avg_weekly_visits, alternative = "two.sided")
var(coffee[coffee$cust_type == "Heavy", ]$avg_weekly_packs)
var(coffee[coffee$cust_type == "Light", ]$avg_weekly_packs)
var.test(coffee[coffee$cust_type == "Heavy", ]$avg_weekly_packs, coffee[coffee$cust_type == "Light", ]$avg_weekly_packs, alternative = "two.sided")
var(coffee[coffee$cust_type == "Heavy", ]$avg_weekly_vol)
var(coffee[coffee$cust_type == "Light", ]$avg_weekly_vol)
var.test(coffee[coffee$cust_type == "Heavy", ]$avg_weekly_vol, coffee[coffee$cust_type == "Light", ]$avg_weekly_vol, alternative = "two.sided")
wilcox.test(avg_weekly_spend~cust_type, data = coffee)
View(coffee)
View(coffee)
# Compare variance of avg_weekly_spend across heavy and light users
var(coffee[coffee$cust_type == "Heavy", ]$avg_weekly_spend)
var(coffee[coffee$cust_type == "Light", ]$avg_weekly_spend)
var.test(coffee[coffee$cust_type == "Heavy", ]$avg_weekly_spend,
coffee[coffee$cust_type == "Light", ]$avg_weekly_spend,
alternative = "two.sided")
t.test(coffee[coffee$cust_type == "Heavy", ]$avg_weekly_spend,
coffee[coffee$cust_type == "Light", ]$avg_weekly_spend,
alternative = "two.sided", var.equal = FALSE, conf.level = 0.95)
wilcox.test(avg_weekly_spend ~ cust_type, data = coffee)
# Step 0 - load packages -----------------------------------------------------
# Step 1 - load data ---------------------------------------------------------
setwd("C:/Users/Julian/Documents/retailGroupProject/data/results")
coffee <- read.csv("buying_behaviour.csv")
# Step 2 - analyze differenes in buying behaviour (heavy vs. light)
#    The approach is as follows:
# 1. Inspecting variances and formally testing for equality using Fisher's F-test
# 2. Depending on outcome of Fisher's F-test testing for significant differences in means
#    using the independent two-samples t-test (equal or unequal variances)
# 3. Testing for equality of the distributions using Wilcoxon-Mann-Whitney test (does not assume ~N())
# Compare variance of avg_weekly_spend across heavy and light users
var(coffee[coffee$cust_type == "Heavy", ]$avg_weekly_spend)
var(coffee[coffee$cust_type == "Light", ]$avg_weekly_spend)
var.test(coffee[coffee$cust_type == "Heavy", ]$avg_weekly_spend,
coffee[coffee$cust_type == "Light", ]$avg_weekly_spend,
alternative = "two.sided")
t.test(coffee[coffee$cust_type == "Heavy", ]$avg_weekly_spend,
coffee[coffee$cust_type == "Light", ]$avg_weekly_spend,
alternative = "two.sided", var.equal = FALSE, conf.level = 0.95)
wilcox.test(avg_weekly_spend ~ cust_type, data = coffee)
# Compare variance of avg_weekly_visits across heavy and light users
var(coffee[coffee$cust_type == "Heavy", ]$avg_weekly_visits)
var(coffee[coffee$cust_type == "Light", ]$avg_weekly_visits)
var.test(coffee[coffee$cust_type == "Heavy", ]$avg_weekly_visits,
coffee[coffee$cust_type == "Light", ]$avg_weekly_visits,
alternative = "two.sided")
t.test(coffee[coffee$cust_type == "Heavy", ]$avg_weekly_visits,
coffee[coffee$cust_type == "Light", ]$avg_weekly_visits,
alternative = "two.sided", var.equal = FALSE, conf.level = 0.95)
wilcox.test(avg_weekly_visits ~ cust_type, data = coffee)
# Compare variance of avg_weekly_packs across heavy and light users
var(coffee[coffee$cust_type == "Heavy", ]$avg_weekly_packs)
var(coffee[coffee$cust_type == "Light", ]$avg_weekly_packs)
var.test(coffee[coffee$cust_type == "Heavy", ]$avg_weekly_packs,
coffee[coffee$cust_type == "Light", ]$avg_weekly_packs,
alternative = "two.sided")
t.test(coffee[coffee$cust_type == "Heavy", ]$avg_weekly_packs,
coffee[coffee$cust_type == "Light", ]$avg_weekly_packs,
alternative = "two.sided", var.equal = FALSE, conf.level = 0.95)
wilcox.test(avg_weekly_packs ~ cust_type, data = coffee)
# Compare variance of avg_weekly_vol across heavy and light users
var(coffee[coffee$cust_type == "Heavy", ]$avg_weekly_vol)
var(coffee[coffee$cust_type == "Light", ]$avg_weekly_vol)
var.test(coffee[coffee$cust_type == "Heavy", ]$avg_weekly_vol,
coffee[coffee$cust_type == "Light", ]$avg_weekly_vol,
alternative = "two.sided")
t.test(coffee[coffee$cust_type == "Heavy", ]$avg_weekly_vol,
coffee[coffee$cust_type == "Light", ]$avg_weekly_vol,
alternative = "two.sided", var.equal = FALSE, conf.level = 0.95)
wilcox.test(avg_weekly_vol ~ cust_type, data = coffee)
setwd("C:/Users/Julian/Desktop/MScBA/Retail&Marketing/Group_Assignment")
coffee <- read.csv("InstantCoffee.csv",
encoding = "latin1",
stringsAsFactors = FALSE)
unique(coffee&HOUSE)
unique(coffee$HOUSE)
nrow(unique(coffee$HOUSE))
x <- unique(coffee$HOUSE)
?glm
brand_loyalty <- read.csv("hh_brand_loyalty.csv")
store_loyalty <- read.csv("hh_store_loyalty.csv")
setwd("C:/Users/Julian/Documents/retailGroupProject/julian")
brand_loyalty <- read.csv("hh_brand_loyalty.csv")
store_loyalty <- read.csv("hh_store_loyalty.csv")
View(store_loyalty)
View(brand_loyalty)
View(store_loyalty)
View(brand_loyalty)
library(readr)
library(dplyr)
coffee_join_brand <- left_join(coffee, brand_loyalty)
?left_join
View(brand_loyalty)
coffee_join_brand <- left_join(coffee, brand_loyalty, by = c("HOUSE", "house"))
colnames(coffee) <- coffee %>% colnames() %>% tolower()
View(coffee)
colnames(brand_loyalty) <- brand_loyalty %>% colnames() %>% tolower()
coffee_join_brand <- left_join(coffee, brand_loyalty)
View(coffee_join_brand)
coffee_join_brand$x <- NULL
brand_loy <- glm(loyalty~cust_type, family = poisson, data = coffee_join_brand)
View(coffee_join_brand)
View(coffee_join_brand)
setwd("C:/Users/Julian/Documents/retailGroupProject/data/results")
coffee <- read.csv("buying_behaviour.csv")
setwd("C:/Users/Julian/Documents/retailGroupProject/julian")
brand_loyalty <- read.csv("hh_brand_loyalty.csv")
store_loyalty <- read.csv("hh_store_loyalty.csv")
library(dplyr)
colnames(coffee) <- coffee %>% colnames() %>% tolower()
colnames(brand_loyalty) <- brand_loyalty %>% colnames() %>% tolower()
coffee_join_brand <- left_join(coffee, brand_loyalty)
coffee_join_brand$x <- NULL
View(store_loyalty)
View(coffee_join_brand)
# Poisson regression of loyalty measures on dummy cust_type
brand_loy <- glm(loyalty~cust_type, family = poisson, data = coffee_join_brand)
warnings()
summary(loyalty1)
summary(brand_loy)
brand_loy <- glm(loyalty~cust_type, family = "poisson", data = coffee_join_brand)
summary(brand_loy)
colnames(store_loyalty) <- store_loyalty %>% colnames() %>% tolower()
coffee_join_store <- left_join(coffee, store_loyalty)
coffee_join_store$x <- NULL
store_loy <- glm(loyalty2~cust_type, family = poisson, data = coffee)
summary(store_loy)
store_loy <- glm(loyalty~cust_type, family = poisson, data = coffee_join_store)
summary(store_loy)
View(brand_loyalty)
View(coffee)
View(coffee)
